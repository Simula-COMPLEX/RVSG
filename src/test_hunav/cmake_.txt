cmake_minimum_required(VERSION 3.8)
project(test_hunav)

if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 14)
endif()

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# ======== 强制使用系统库，避免 Anaconda 干扰 ========
set(ENV{PATH} "/usr/bin:$ENV{PATH}")
message(STATUS "Updated PATH: $ENV{PATH}")

set(CMAKE_INSTALL_RPATH "/usr/lib:/usr/lib/x86_64-linux-gnu:/lib/x86_64-linux-gnu")
list(REMOVE_ITEM CMAKE_PREFIX_PATH "/home/complexse25/anaconda3/envs/turtlebot4")
list(REMOVE_ITEM CMAKE_PREFIX_PATH "/home/complexse25/anaconda3")

# ======== 查找 Protobuf ========
find_package(Protobuf REQUIRED)
if(Protobuf_FOUND)
  message(STATUS "Found Protobuf: ${Protobuf_INCLUDE_DIRS}")
else()
  message(FATAL_ERROR "Protobuf not found!")
endif()
include_directories(${Protobuf_INCLUDE_DIRS})

# ======== Python3 & UUID ========
set(Python3_LIBRARY "/usr/lib/x86_64-linux-gnu/libpython3.10.so.1.0")
set(Python3_INCLUDE_DIR "/usr/include/python3.10")
set(UUID_LIBRARIES "/usr/lib/x86_64-linux-gnu/libuuid.so")
set(UUID_INCLUDE_DIRS "/usr/include/uuid")

find_package(Python3 REQUIRED)
include_directories(${Python3_INCLUDE_DIR})

# ======== 查找依赖 ========
find_package(ament_cmake REQUIRED)
find_package(tinyxml2_vendor REQUIRED)
find_package(TinyXML2 REQUIRED)
find_package(ament_index_cpp REQUIRED)
find_package(rclcpp REQUIRED)
find_package(gazebo_ros REQUIRED)
find_package(gazebo REQUIRED)
find_package(hunav_msgs REQUIRED)
find_package(tf2 REQUIRED)
find_package(tf2_geometry_msgs REQUIRED)

# ======== 检查 Gazebo 变量 ========
message(STATUS "Gazebo Libraries: ${GAZEBO_LIBRARIES}")

include_directories(include ${GAZEBO_INCLUDE_DIRS} ${TinyXML2_INCLUDE_DIRS})

# ======== 添加插件 ========
add_library(HuNavPlugin SHARED src/HuNavPlugin.cpp)
target_include_directories(HuNavPlugin PUBLIC include)
ament_target_dependencies(HuNavPlugin rclcpp gazebo gazebo_ros hunav_msgs geometry_msgs tf2 tf2_geometry_msgs)
target_link_libraries(HuNavPlugin ${GAZEBO_LIBRARIES} ${Protobuf_LIBRARIES} ${TinyXML2_LIBRARIES})

ament_export_libraries(HuNavPlugin)

# ======== 添加可执行文件 ========
add_executable(hunav_gazebo_world_generator src/WorldGenerator.cpp)
ament_target_dependencies(hunav_gazebo_world_generator rclcpp hunav_msgs geometry_msgs tf2_geometry_msgs tf2 tf2_ros tinyxml2_vendor)
target_link_libraries(hunav_gazebo_world_generator ${TinyXML2_LIBRARIES})

# ======== 安装目标 ========
install(TARGETS hunav_gazebo_world_generator
  DESTINATION lib/${PROJECT_NAME}
)

install(TARGETS HuNavPlugin
  ARCHIVE DESTINATION lib/${PROJECT_NAME}
  LIBRARY DESTINATION lib/${PROJECT_NAME}
  RUNTIME DESTINATION bin/${PROJECT_NAME}
)

install(DIRECTORY include/
  DESTINATION include
)

install(DIRECTORY launch/
  DESTINATION share/${PROJECT_NAME}/launch
)

install(DIRECTORY media/models
  DESTINATION share/${PROJECT_NAME}/
)

ament_package()
